import{j as e,a as B}from"./jsx-runtime-86dfebf6.js";import{r as S}from"./index-1b03fe98.js";import{h as G}from"./moment-a9aaa855.js";import{s as r,l as H,r as u}from"./sonar-ace0ce62.js";import{L as t,a}from"./LineChart-ad7cee98.js";import{L as Z}from"./AreaChart-a3475e62.js";import"./StackedNormalizedAreaChart-e4db09db.js";import{L as l,a as J}from"./RadialValueMarker-7b3f8322.js";import{t as K}from"./time-a9784969.js";import"./chroma-699b8ba0.js";import"./range-163cdb4a.js";import"./index-256d607f.js";import"./rdk-0beed5d4.js";import"./index-6fd5a17b.js";import"./frame-a8f3761f.js";import"./ScatterPlot-34d242f9.js";import"./builder-9833ba7e.js";import"./RadialAxis-6c2bc59c.js";import"./quantile-a1f83f78.js";import"./schemes-56affe43.js";import"./index-f6b105ee.js";import"./extends-20258d9b.js";import"./SVGVisualElement-f20753d9.js";import"./functions-234b1417.js";import"./helper-26bacd48.js";import"./index-9494de61.js";import"./utils-83ce1bd4.js";import"./DiscreteLegendEntry-49610185.js";import"./SequentialLegend-1647127f.js";import"./Count-a38a1947.js";import"./interpolation-4baac368.js";import"./area-a8b9ef93.js";import"./expand-7b65a05b.js";const ke={title:"Charts/Line Chart/Single Series",component:t,subcomponents:{LineSeries:a,Line:Z}},i=()=>e(t,{width:350,height:250,data:r,series:e(a,{interpolation:"linear",colorScheme:"cybertron",line:e(Z,{strokeWidth:4})})}),s=()=>e(t,{width:350,height:250,data:r,series:e(a,{animated:!1})}),o=()=>e("div",{style:{width:"50vw",height:"50vh",border:"solid 1px red"},children:e(t,{data:r,xAxis:e(l,{type:"time"})})}),n=()=>e(t,{width:350,height:250,data:r,xAxis:e(l,{type:"time",tickSeries:e(J,{interval:K})})}),m=()=>e(t,{width:400,height:250,data:H,series:e(a,{colorScheme:"cybertron",interpolation:"linear"}),xAxis:e(l,{type:"time"})}),c=()=>e(t,{width:350,height:250,data:r,series:e(a,{colorScheme:(d,g,h)=>h?"blue":"green"})}),p=()=>e(O,{});let L,M=0;const O=()=>{const[d,g]=S.useState([...r]),h=()=>{L=setInterval(()=>{const q=[...d,{id:u(1,1e4),key:G("2020-02-29T08:00:00.000Z").add(++M,"day").toDate(),data:u(1,20)}];g(q)},500)};return B(S.Fragment,{children:[e(t,{width:550,height:350,data:d}),e("br",{}),e("button",{onClick:h,children:"Start"}),e("button",{onClick:()=>clearInterval(L),children:"Stop"})]})};var x,D,y;i.parameters={...i.parameters,docs:{...(x=i.parameters)==null?void 0:x.docs,source:{originalSource:'() => <LineChart width={350} height={250} data={singleDateData} series={<LineSeries interpolation="linear" colorScheme="cybertron" line={<Line strokeWidth={4} />} />} />',...(y=(D=i.parameters)==null?void 0:D.docs)==null?void 0:y.source}}};var v,w,A;s.parameters={...s.parameters,docs:{...(v=s.parameters)==null?void 0:v.docs,source:{originalSource:"() => <LineChart width={350} height={250} data={singleDateData} series={<LineSeries animated={false} />} />",...(A=(w=s.parameters)==null?void 0:w.docs)==null?void 0:A.source}}};var b,f,C;o.parameters={...o.parameters,docs:{...(b=o.parameters)==null?void 0:b.docs,source:{originalSource:`() => <div style={{
  width: '50vw',
  height: '50vh',
  border: 'solid 1px red'
}}>
    <LineChart data={singleDateData} xAxis={<LinearXAxis type="time" />} />
  </div>`,...(C=(f=o.parameters)==null?void 0:f.docs)==null?void 0:C.source}}};var k,X,_;n.parameters={...n.parameters,docs:{...(k=n.parameters)==null?void 0:k.docs,source:{originalSource:'() => <LineChart width={350} height={250} data={singleDateData} xAxis={<LinearXAxis type="time" tickSeries={<LinearXAxisTickSeries interval={timeDay} />} />} />',...(_=(X=n.parameters)==null?void 0:X.docs)==null?void 0:_.source}}};var j,I,T;m.parameters={...m.parameters,docs:{...(j=m.parameters)==null?void 0:j.docs,source:{originalSource:'() => <LineChart width={400} height={250} data={largeDateData} series={<LineSeries colorScheme="cybertron" interpolation="linear" />} xAxis={<LinearXAxis type="time" />} />',...(T=(I=m.parameters)==null?void 0:I.docs)==null?void 0:T.source}}};var U,N,W;c.parameters={...c.parameters,docs:{...(U=c.parameters)==null?void 0:U.docs,source:{originalSource:"() => <LineChart width={350} height={250} data={singleDateData} series={<LineSeries colorScheme={(_data, _index, active) => active ? 'blue' : 'green'} />} />",...(W=(N=c.parameters)==null?void 0:N.docs)==null?void 0:W.source}}};var z,E,F;p.parameters={...p.parameters,docs:{...(z=p.parameters)==null?void 0:z.docs,source:{originalSource:"() => <LiveUpdatingStory />",...(F=(E=p.parameters)==null?void 0:E.docs)==null?void 0:F.source}}};export{o as Autosize,c as DynamicColors,n as Interval,m as LargeDataset,p as LiveUpdating,s as NoAnimation,i as Simple,ke as default};
