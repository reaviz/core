import{j as e,a as _}from"./jsx-runtime-86dfebf6.js";import{R as M}from"./index-1b03fe98.js";import"./moment-a9aaa855.js";import{l as i,b as B}from"./sonar-ace0ce62.js";import{L as R,a as $}from"./LineChart-ad7cee98.js";import{o as p,L as d,a as h,k as u,Z as E}from"./RadialValueMarker-7b3f8322.js";import{S as F,a as H,b as I}from"./ScatterPlot-34d242f9.js";import{A as J,a as K}from"./AreaChart-a3475e62.js";import"./StackedNormalizedAreaChart-e4db09db.js";import{T as S}from"./schemes-56affe43.js";import"./RadialAxis-6c2bc59c.js";import"./chroma-699b8ba0.js";import"./range-163cdb4a.js";import"./rdk-0beed5d4.js";import"./index-6fd5a17b.js";import"./index-256d607f.js";import"./frame-a8f3761f.js";import"./time-a9784969.js";import"./builder-9833ba7e.js";import"./quantile-a1f83f78.js";import"./functions-234b1417.js";import"./helper-26bacd48.js";import"./index-9494de61.js";import"./utils-83ce1bd4.js";import"./DiscreteLegendEntry-49610185.js";import"./SequentialLegend-1647127f.js";import"./Count-a38a1947.js";import"./SVGVisualElement-f20753d9.js";import"./interpolation-4baac368.js";import"./area-a8b9ef93.js";import"./expand-7b65a05b.js";import"./index-f6b105ee.js";import"./extends-20258d9b.js";const Xe={title:"Utils/Zoom Pan"},s=()=>e(R,{width:450,height:300,data:i,zoomPan:e(p,{}),series:e($,{tooltip:e(S,{disabled:!0}),markLine:null}),xAxis:e(d,{type:"time",tickSeries:e(h,{label:e(u,{rotation:!1})})})}),n=()=>e(J,{width:350,height:250,data:i,zoomPan:e(p,{}),series:e(K,{tooltip:e(S,{disabled:!0}),markLine:null}),xAxis:e(d,{type:"time",tickSeries:e(h,{label:e(u,{rotation:!1})})})}),m=()=>e(F,{height:400,width:750,data:B,margins:20,zoomPan:e(p,{}),xAxis:e(d,{type:"time",tickSeries:e(h,{label:e(u,{rotation:!1})})}),series:e(H,{point:e(I,{color:"rgba(174, 52, 255, .5)",size:a=>a.metadata.severity+5})})}),l=()=>e(q,{}),r=()=>e(q,{modifier:!0});r.story={name:"Generic Zoom Pan w/ Modifier"};const c=()=>{const[a,t]=M.useState([i[5].key,i[25].key]);return e(R,{width:450,height:300,data:i,zoomPan:e(p,{domain:a,onZoomPan:({domain:o})=>{t(o)}}),series:e($,{tooltip:e(S,{disabled:!0}),markLine:null}),xAxis:e(d,{domain:a,type:"time",tickSeries:e(h,{label:e(u,{rotation:!1})})})})},q=({modifier:a})=>{const[{scale:t,x:o,y:x},U]=M.useState({scale:1,x:0,y:0});return e("div",{style:{border:"dotted 2px red"},children:e("svg",{height:"350",width:"500",children:e(E,{height:350,width:500,pannable:!0,minZoom:1,maxZoom:10,constrain:!1,scale:t,x:o,y:x,requireZoomModifier:a,onZoomPan:W=>U(W),children:_("g",{transform:`translate(${o}, ${x}) scale(${t})`,children:[e("circle",{cx:"50",cy:"100",r:"10",fill:"blue"}),e("circle",{cx:"100",cy:"100",r:"10",fill:"red"}),e("circle",{cx:"150",cy:"100",r:"10",fill:"green"})]})})})})};var L,g,A;s.parameters={...s.parameters,docs:{...(L=s.parameters)==null?void 0:L.docs,source:{originalSource:'() => <LineChart width={450} height={300} data={largeDateData} zoomPan={<ChartZoomPan />} series={<LineSeries tooltip={<TooltipArea disabled={true} />} markLine={null} />} xAxis={<LinearXAxis type="time" tickSeries={<LinearXAxisTickSeries label={<LinearXAxisTickLabel rotation={false} />} />} />} />',...(A=(g=s.parameters)==null?void 0:g.docs)==null?void 0:A.source}}};var k,P,f;n.parameters={...n.parameters,docs:{...(k=n.parameters)==null?void 0:k.docs,source:{originalSource:'() => <AreaChart width={350} height={250} data={largeDateData} zoomPan={<ChartZoomPan />} series={<AreaSeries tooltip={<TooltipArea disabled={true} />} markLine={null} />} xAxis={<LinearXAxis type="time" tickSeries={<LinearXAxisTickSeries label={<LinearXAxisTickLabel rotation={false} />} />} />} />',...(f=(P=n.parameters)==null?void 0:P.docs)==null?void 0:f.source}}};var y,b,Z;m.parameters={...m.parameters,docs:{...(y=m.parameters)==null?void 0:y.docs,source:{originalSource:'() => <ScatterPlot height={400} width={750} data={largeSignalChartData} margins={20} zoomPan={<ChartZoomPan />} xAxis={<LinearXAxis type="time" tickSeries={<LinearXAxisTickSeries label={<LinearXAxisTickLabel rotation={false} />} />} />} series={<ScatterSeries point={<ScatterPoint color="rgba(174, 52, 255, .5)" size={v => v.metadata.severity + 5} />} />} />',...(Z=(b=m.parameters)==null?void 0:b.docs)==null?void 0:Z.source}}};var D,T,X;l.parameters={...l.parameters,docs:{...(D=l.parameters)==null?void 0:D.docs,source:{originalSource:"() => <GenericZoomPanStory />",...(X=(T=l.parameters)==null?void 0:T.docs)==null?void 0:X.source}}};var C,w,z;r.parameters={...r.parameters,docs:{...(C=r.parameters)==null?void 0:C.docs,source:{originalSource:"() => <GenericZoomPanStory modifier={true} />",...(z=(w=r.parameters)==null?void 0:w.docs)==null?void 0:z.source}}};var v,G,j;c.parameters={...c.parameters,docs:{...(v=c.parameters)==null?void 0:v.docs,source:{originalSource:`() => {
  const [domain, setDomain] = React.useState<[any, any]>([largeDateData[5].key, largeDateData[25].key]);
  return <LineChart width={450} height={300} data={largeDateData} zoomPan={<ChartZoomPan domain={domain} onZoomPan={({
    domain
  }) => {
    setDomain(domain);
  }} />} series={<LineSeries tooltip={<TooltipArea disabled={true} />} markLine={null} />} xAxis={<LinearXAxis domain={domain} type="time" tickSeries={<LinearXAxisTickSeries label={<LinearXAxisTickLabel rotation={false} />} />} />} />;
}`,...(j=(G=c.parameters)==null?void 0:G.docs)==null?void 0:j.source}}};export{n as Area,c as DefaultZoom,l as GenericZoomPan,r as GenericZoomPanWModifier,s as Line,m as Scatter,Xe as default};
