import{j as a,a as k}from"./jsx-runtime-86dfebf6.js";import{r as s}from"./index-1b03fe98.js";import{b as _,f as w,h as M}from"./schemes-56affe43.js";import{a as T}from"./builder-9833ba7e.js";import{b as D,a as E,e as A}from"./BarChart-9c825fb0.js";import"./chroma-699b8ba0.js";import"./RadialAxis-6c2bc59c.js";import{j as I,g as N}from"./RadialValueMarker-7b3f8322.js";import{C as V}from"./rdk-0beed5d4.js";import"./MarimekkoChart-d265de4f.js";import"./StackedBarChart-f620755a.js";import"./StackedNormalizedBarChart-67a599d9.js";import"./HistogramBarChart-3a034dc5.js";const d=e=>a(D,{...e});d.defaultProps={tooltip:a(_,{placement:"top",content:e=>a(w,{value:{y:e.value,x:e.y}})})};try{d.displayName="LinearGaugeBar",d.__docgenInfo={description:"",displayName:"LinearGaugeBar",props:{active:{defaultValue:null,description:"Whether the bar is active or not.",name:"active",required:!1,type:{name:"boolean"}},activeBrightness:{defaultValue:null,description:`Chroma brightness factor to brighten the active bar. See
https://gka.github.io/chroma.js/#color-brighten for more info.`,name:"activeBrightness",required:!1,type:{name:"number"}},xScale:{defaultValue:null,description:"D3 scale for X Axis. Set internally by `BarChart`.",name:"xScale",required:!1,type:{name:"any"}},yScale:{defaultValue:null,description:"D3 scale for Y Axis. Set internally by `BarChart`.",name:"yScale",required:!1,type:{name:"any"}},xScale1:{defaultValue:null,description:"D3 scale for X Multi-Group Axis. Set internally by `BarChart`.",name:"xScale1",required:!1,type:{name:"any"}},data:{defaultValue:null,description:"Parsed data shape. Set internally by `BarChart`.",name:"data",required:!1,type:{name:"ChartInternalShallowDataShape"}},id:{defaultValue:null,description:"Id set internally by `BarChart`.",name:"id",required:!1,type:{name:"string"}},gradient:{defaultValue:null,description:"Gradient shades for the bar.",name:"gradient",required:!1,type:{name:"ReactElement<GradientProps, FC<Partial<GradientProps>>>"}},rx:{defaultValue:null,description:"SVG rx attribute for the bar.",name:"rx",required:!1,type:{name:"number"}},ry:{defaultValue:null,description:"SVG ry attribute for the bar.",name:"ry",required:!1,type:{name:"number"}},width:{defaultValue:null,description:"Width of the bar. Set internally by `BarSeries`.",name:"width",required:!1,type:{name:"number"}},padding:{defaultValue:null,description:"Padding for the bar groups.",name:"padding",required:!1,type:{name:"number"}},barCount:{defaultValue:null,description:"Total number of bars used for animation. Set internally by `BarSeries`.",name:"barCount",required:!1,type:{name:"number"}},color:{defaultValue:null,description:"Color callback for the bar.",name:"color",required:!1,type:{name:"any"}},cursor:{defaultValue:null,description:"Cursor for the bar element.",name:"cursor",required:!1,type:{name:"string"}},barIndex:{defaultValue:null,description:"Index of the bar. Set internally by `BarSeries`.",name:"barIndex",required:!1,type:{name:"number"}},groupIndex:{defaultValue:null,description:"Index of the group. Set internally by `BarSeries`.",name:"groupIndex",required:!1,type:{name:"number"}},animated:{defaultValue:null,description:"Whether to animate the enter/update/exit. Set internally by `BarSeries`.",name:"animated",required:!1,type:{name:"boolean"}},isCategorical:{defaultValue:null,description:"Whether this is categorical chart or not. Set internally by `BarSeries`.",name:"isCategorical",required:!1,type:{name:"boolean"}},rangeLines:{defaultValue:null,description:"Rangelines element. for the bar.",name:"rangeLines",required:!1,type:{name:"ReactElement<RangeLinesProps, FC<Partial<RangeLinesProps>>>"}},mask:{defaultValue:null,description:"Mask element for the bar.",name:"mask",required:!1,type:{name:"ReactElement<MaskProps, FC<MaskProps>>"}},tooltip:{defaultValue:{value:`(
    <ChartTooltip
      placement="top"
      content={(data) => (
        <TooltipTemplate value={{ y: data.value, x: data.y }} />
      )}
    />
  )`},description:"Tooltip element.",name:"tooltip",required:!1,type:{name:"ReactElement<ChartTooltipProps, FC<Partial<ChartTooltipProps>>>"}},layout:{defaultValue:null,description:"Direction of the chart. Set internally by `BarSeries`.",name:"layout",required:!1,type:{name:"enum",value:[{value:'"horizontal"'},{value:'"vertical"'}]}},type:{defaultValue:null,description:"Type of bar chart. Set internally by `BarSeries`.",name:"type",required:!1,type:{name:"enum",value:[{value:'"standard"'},{value:'"grouped"'},{value:'"stacked"'},{value:'"stackedNormalized"'},{value:'"stackedDiverging"'},{value:'"marimekko"'},{value:'"waterfall"'}]}},label:{defaultValue:null,description:"Label element.",name:"label",required:!1,type:{name:"ReactElement<BarLabelProps, FC<Partial<BarLabelProps>>>"}},guide:{defaultValue:null,description:"Guide bar component.",name:"guide",required:!1,type:{name:"ReactElement<GuideBarProps, FC<Partial<GuideBarProps>>>"}},minHeight:{defaultValue:null,description:"Force a min height on the bar.",name:"minHeight",required:!1,type:{name:"number"}},glow:{defaultValue:null,description:"Glow styling for the bar.",name:"glow",required:!1,type:{name:"Glow"}},onClick:{defaultValue:null,description:"Event for when the bar is clicked.",name:"onClick",required:!1,type:{name:"(event: ClickEvent) => void"}},onMouseEnter:{defaultValue:null,description:"Event for when the bar has mouse enter.",name:"onMouseEnter",required:!1,type:{name:"(event: any) => void"}},onMouseLeave:{defaultValue:null,description:"Event for when the bar has mouse leave.",name:"onMouseLeave",required:!1,type:{name:"(event: any) => void"}},onMouseMove:{defaultValue:null,description:"Event for when a bar has mouse move.",name:"onMouseMove",required:!1,type:{name:"(event: any) => void"}},className:{defaultValue:null,description:"Classnames to apply to the element.",name:"className",required:!1,type:{name:"any"}},style:{defaultValue:null,description:"CSS styles to apply to the element.",name:"style",required:!1,type:{name:"any"}}}}}catch{}const p=({height:e,width:n,fill:i,...r})=>a("rect",{...r,fill:i,width:Math.max(n,0),height:Math.max(e,0)});p.defaultProps={fill:"#484848"};try{p.displayName="LinearGaugeOuterBar",p.__docgenInfo={description:"",displayName:"LinearGaugeOuterBar",props:{height:{defaultValue:null,description:"Height of the chart. Set by `LinearGauge` component.",name:"height",required:!1,type:{name:"number"}},width:{defaultValue:null,description:"Width of the chart. Set by `LinearGauge` component.",name:"width",required:!1,type:{name:"number"}},fill:{defaultValue:{value:"#484848"},description:"Fill for the bar element.",name:"fill",required:!1,type:{name:"string"}}}}}catch{}const m=({height:e,width:n,bar:i,outerBar:r,isMultiSeries:c,...f})=>k(s.Fragment,{children:[!c&&r&&a(V,{element:r,height:e,width:n}),a(E,{...f,layout:"horizontal",tooltip:null,bar:a(V,{element:i})})]});m.defaultProps={outerBar:a(p,{}),bar:a(d,{})};try{m.displayName="LinearGaugeSeries",m.__docgenInfo={description:"",displayName:"LinearGaugeSeries",props:{height:{defaultValue:null,description:"Height of the chart. Set by `LinearGauge` component.",name:"height",required:!1,type:{name:"number"}},width:{defaultValue:null,description:"Width of the chart. Set by `LinearGauge` component.",name:"width",required:!1,type:{name:"number"}},isMultiSeries:{defaultValue:null,description:"Whether its a multi-series or not. Set by `LinearGauge` component.",name:"isMultiSeries",required:!1,type:{name:"boolean"}},bar:{defaultValue:{value:"<LinearGaugeBar />"},description:"Bar element. Only applicable for single series.",name:"bar",required:!1,type:{name:"ReactElement<BarProps, FC<Partial<BarProps>>>"}},outerBar:{defaultValue:{value:"<LinearGaugeOuterBar />"},description:"Outer bar element. Only applicable for single series.",name:"outerBar",required:!1,type:{name:"ReactElement<LinearGaugeOuterBarProps, FC<Partial<LinearGaugeOuterBarProps>>>"}},data:{defaultValue:null,description:"Parsed data shape. Set internally by `BarChart`.",name:"data",required:!1,type:{name:"ChartInternalDataShape[]"}},id:{defaultValue:null,description:"Id of the bar chart. Set internally by `BarChart`.",name:"id",required:!1,type:{name:"string"}},animated:{defaultValue:null,description:"Whether the chart is animated or not.",name:"animated",required:!1,type:{name:"boolean"}},colorScheme:{defaultValue:null,description:"Color scheme for the chart.",name:"colorScheme",required:!1,type:{name:"ColorSchemeType"}},type:{defaultValue:null,description:"Type of the chart.",name:"type",required:!1,type:{name:"enum",value:[{value:'"standard"'},{value:'"grouped"'},{value:'"stacked"'},{value:'"stackedNormalized"'},{value:'"stackedDiverging"'},{value:'"marimekko"'},{value:'"waterfall"'}]}},tooltip:{defaultValue:null,description:"Tooltip for the chart area.",name:"tooltip",required:!1,type:{name:"ReactElement<TooltipAreaProps, ForwardRefExoticComponent<Partial<TooltipAreaProps> & RefAttributes<any>>>"}},xScale:{defaultValue:null,description:"D3 scale for X Axis. Set internally by `BarChart`.",name:"xScale",required:!1,type:{name:"any"}},yScale:{defaultValue:null,description:"D3 scale for Y Axis. Set internally by `BarChart`.",name:"yScale",required:!1,type:{name:"any"}},valueMarkers:{defaultValue:null,description:"Value markers line for the chart.",name:"valueMarkers",required:!1,type:{name:"ReactElement<LinearValueMarkerProps, FC<LinearValueMarkerProps>>[]"}},xScale1:{defaultValue:null,description:"D3 scale for X Multi-Group Axis. Set internally by `BarChart`.",name:"xScale1",required:!1,type:{name:"any"}},padding:{defaultValue:null,description:"Amount of padding between each bar.",name:"padding",required:!1,type:{name:"number"}},groupPadding:{defaultValue:null,description:"Amount of padding between each group.",name:"groupPadding",required:!1,type:{name:"number"}},isCategorical:{defaultValue:null,description:"Whether the chart is categorical or not. Set internally by `BarChart`.",name:"isCategorical",required:!1,type:{name:"boolean"}},layout:{defaultValue:null,description:"Direction of the chart",name:"layout",required:!1,type:{name:"enum",value:[{value:'"horizontal"'},{value:'"vertical"'}]}},binSize:{defaultValue:null,description:"The size of each bin/bucket in the bar chart.",name:"binSize",required:!1,type:{name:"number"}}}}}catch{}const v=({id:e,width:n,height:i,margins:r,className:c,containerClassName:f,series:q,data:t,minValue:C,maxValue:B})=>{const y=s.useMemo(()=>Array.isArray(t)?A([{key:"default",data:t}],"expand","horizontal"):T([t],"horizontal"),[t]),x=s.useCallback((l,u,h,b,o,g)=>{const S=I({width:h,type:"value",data:u,domain:l?void 0:[o,g],isMultiSeries:l}),L=N({type:"category",height:b,data:u,isMultiSeries:l});return{keyScale:S,valueScale:L}},[]),G=s.useCallback(({chartHeight:l,chartWidth:u,id:h,chartSized:b})=>{const o=Array.isArray(t),g=o?"stackedNormalized":"standard",{keyScale:P,valueScale:S}=x(o,y,u,l,C,B);return a(s.Fragment,{children:b&&a(V,{element:q,id:`linear-gauge-series-${h}`,data:y,isCategorical:!0,xScale:P,yScale:S,type:g,height:l,width:u,isMultiSeries:o})})},[t,x,B,C,q,y]);return a(M,{id:e,width:n,height:i,margins:r,className:c,containerClassName:f,children:G})};v.defaultProps={minValue:0,maxValue:100,series:a(m,{})};try{v.displayName="LinearGauge",v.__docgenInfo={description:"",displayName:"LinearGauge",props:{data:{defaultValue:null,description:"Data the chart will receive to render.",name:"data",required:!1,type:{name:"ChartShallowDataShape<ChartDataTypes | [ChartDataTypes, ChartDataTypes]> | ChartShallowDataShape<ChartDataTypes | [...]>[]"}},series:{defaultValue:{value:"<LinearGaugeSeries />"},description:"The series component that renders the bar components.",name:"series",required:!1,type:{name:"ReactElement<LinearGaugeSeriesProps, FC<Partial<LinearGaugeSeriesProps>>>"}},minValue:{defaultValue:{value:"0"},description:"Min value to scale on. Only applicable for single-series.",name:"minValue",required:!1,type:{name:"number"}},maxValue:{defaultValue:{value:"100"},description:"Max value to scale on. Only applicable for single-series.",name:"maxValue",required:!1,type:{name:"number"}},id:{defaultValue:null,description:"Id of the chart.",name:"id",required:!1,type:{name:"string"}},width:{defaultValue:null,description:"Width of the chart. If not provided will autosize.",name:"width",required:!1,type:{name:"number"}},height:{defaultValue:null,description:"Height of the chart. If not provided will autosize.",name:"height",required:!1,type:{name:"number"}},margins:{defaultValue:null,description:"Margins for the chart.",name:"margins",required:!1,type:{name:"Margins"}},className:{defaultValue:null,description:"Classnames for the chart.",name:"className",required:!1,type:{name:"string"}},containerClassName:{defaultValue:null,description:"Classnames for the chart.",name:"containerClassName",required:!1,type:{name:"string"}},style:{defaultValue:null,description:"Additional css styles.",name:"style",required:!1,type:{name:"StyleHTMLAttributes<SVGSVGElement>"}},center:{defaultValue:null,description:"Center the chart. Used mainly internally.",name:"center",required:!1,type:{name:"boolean"}},centerX:{defaultValue:null,description:"Center chart on X Axis only. Used mainly internally.",name:"centerX",required:!1,type:{name:"boolean"}},centerY:{defaultValue:null,description:"Center chart on Y Axis only. Used mainly internally.",name:"centerY",required:!1,type:{name:"boolean"}}}}}catch{}export{v as L,m as a,d as b,p as c};
