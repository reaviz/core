import{j as e,a as I}from"./jsx-runtime-86dfebf6.js";import{r as S}from"./index-1b03fe98.js";import{S as r,a,b as s}from"./ScatterPlot-34d242f9.js";import{c as g,d as J,e as K,f as M,b as $,r as O}from"./sonar-ace0ce62.js";import{b as Q,c as R,d as V,G as X,e as Z,f as ee}from"./RadialValueMarker-7b3f8322.js";import{s as re}from"./schemes-56affe43.js";import"./RadialAxis-6c2bc59c.js";import{r as te}from"./range-163cdb4a.js";import"./index-256d607f.js";import{S as ae}from"./symbol-31118762.js";import{s as ie}from"./star-24381329.js";import"./builder-9833ba7e.js";import"./chroma-699b8ba0.js";import"./quantile-a1f83f78.js";import"./functions-234b1417.js";import"./rdk-0beed5d4.js";import"./index-6fd5a17b.js";import"./frame-a8f3761f.js";import"./helper-26bacd48.js";import"./index-9494de61.js";import"./utils-83ce1bd4.js";import"./DiscreteLegendEntry-49610185.js";import"./SequentialLegend-1647127f.js";import"./Count-a38a1947.js";import"./SVGVisualElement-f20753d9.js";import"./moment-a9aaa855.js";import"./time-a9784969.js";import"./index-f6b105ee.js";import"./extends-20258d9b.js";const je={title:"Charts/Scatter Plot/Linear",component:r,subcomponents:{ScatterSeries:a,ScatterPoint:s}},o=()=>e(r,{height:400,width:750,data:g,series:e(a,{point:e(s,{color:re.cybertron[0],size:4})})}),n=()=>e(r,{height:400,width:750,data:J,yAxis:e(Q,{type:"category",domain:K,tickSeries:e(R,{label:e(V,{rotation:!1})})}),gridlines:e(X,{line:e(Z,{direction:"y"}),stripe:e(ee,{direction:"y"})})}),c=()=>e(r,{height:400,width:750,data:g,series:e(a,{animated:!1})}),d=()=>e(S.Fragment,{children:te(15).map(t=>e("div",{style:{width:"250px",height:"250px",border:"solid 1px green",margin:"25px",display:"inline-block"},children:e(r,{data:g})},t))}),m=()=>e("div",{style:{width:"50vw",height:"50vh",border:"solid 1px red"},children:e(r,{data:g})}),p=()=>e(r,{height:400,width:750,data:M,series:e(a,{point:e(s,{symbol:()=>{const t=ae().type(ie).size(175)();return e("path",{d:t,style:{fill:"lime",stroke:"purple",strokeWidth:1.5}})}})})}),l=()=>e(r,{height:400,width:750,data:$,margins:20,series:e(a,{point:e(s,{color:"rgba(45, 96, 232, .8)",size:t=>t.metadata.severity+5})})}),h=()=>e(se,{}),se=()=>{const[t,q]=S.useState($.map(i=>({...i}))),H=()=>{const i=t.map(u=>(u.data=O(1,100),{...u}));q(i)};return I(S.Fragment,{children:[e(r,{height:400,width:750,data:t,margins:20,series:e(a,{point:e(s,{color:"rgba(45, 96, 232, .8)",size:i=>i.metadata.severity+5})})}),e("br",{}),e("button",{onClick:H,children:"Update"})]})};var b,y,x;o.parameters={...o.parameters,docs:{...(b=o.parameters)==null?void 0:b.docs,source:{originalSource:"() => <ScatterPlot height={400} width={750} data={medSignalChartData} series={<ScatterSeries point={<ScatterPoint color={schemes.cybertron[0]} size={4} />} />} />",...(x=(y=o.parameters)==null?void 0:y.docs)==null?void 0:x.source}}};var f,v,w;n.parameters={...n.parameters,docs:{...(f=n.parameters)==null?void 0:f.docs,source:{originalSource:'() => <ScatterPlot height={400} width={750} data={signalStageData} yAxis={<LinearYAxis type="category" domain={(signalStages as any)} tickSeries={<LinearYAxisTickSeries label={<LinearYAxisTickLabel rotation={false} />} />} />} gridlines={<GridlineSeries line={<Gridline direction="y" />} stripe={<GridStripe direction="y" />} />} />',...(w=(v=n.parameters)==null?void 0:v.docs)==null?void 0:w.source}}};var P,k,C;c.parameters={...c.parameters,docs:{...(P=c.parameters)==null?void 0:P.docs,source:{originalSource:"() => <ScatterPlot height={400} width={750} data={medSignalChartData} series={<ScatterSeries animated={false} />} />",...(C=(k=c.parameters)==null?void 0:k.docs)==null?void 0:C.source}}};var D,L,A;d.parameters={...d.parameters,docs:{...(D=d.parameters)==null?void 0:D.docs,source:{originalSource:`() => <Fragment>
    {range(15).map(i => <div key={i} style={{
    width: '250px',
    height: '250px',
    border: 'solid 1px green',
    margin: '25px',
    display: 'inline-block'
  }}>
        <ScatterPlot data={medSignalChartData} />
      </div>)}
  </Fragment>`,...(A=(L=d.parameters)==null?void 0:L.docs)==null?void 0:A.source}}};var z,G,Y;m.parameters={...m.parameters,docs:{...(z=m.parameters)==null?void 0:z.docs,source:{originalSource:`() => <div style={{
  width: '50vw',
  height: '50vh',
  border: 'solid 1px red'
}}>
    <ScatterPlot data={medSignalChartData} />
  </div>`,...(Y=(G=m.parameters)==null?void 0:G.docs)==null?void 0:Y.source}}};var F,T,U;p.parameters={...p.parameters,docs:{...(F=p.parameters)==null?void 0:F.docs,source:{originalSource:`() => <ScatterPlot height={400} width={750} data={signalChartData} series={<ScatterSeries point={<ScatterPoint symbol={() => {
  const d = symbol().type(symbolStar).size(175)();
  return <path d={d!} style={{
    fill: 'lime',
    stroke: 'purple',
    strokeWidth: 1.5
  }} />;
}} />} />} />`,...(U=(T=p.parameters)==null?void 0:T.docs)==null?void 0:U.source}}};var j,B,N;l.parameters={...l.parameters,docs:{...(j=l.parameters)==null?void 0:j.docs,source:{originalSource:'() => <ScatterPlot height={400} width={750} data={largeSignalChartData} margins={20} series={<ScatterSeries point={<ScatterPoint color="rgba(45, 96, 232, .8)" size={v => v.metadata.severity + 5} />} />} />',...(N=(B=l.parameters)==null?void 0:B.docs)==null?void 0:N.source}}};var W,E,_;h.parameters={...h.parameters,docs:{...(W=h.parameters)==null?void 0:W.docs,source:{originalSource:"() => <BubbleChartLiveUpdate />",...(_=(E=h.parameters)==null?void 0:E.docs)==null?void 0:_.source}}};export{m as Autosize,l as Bubble,n as CategoricalAxis,h as LiveUpdate,c as NoAnimation,d as Performance,o as Simple,p as Symbols,je as default};
