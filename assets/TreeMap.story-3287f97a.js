import{j as e}from"./jsx-runtime-86dfebf6.js";import{T as a,a as o,c as G,b as h}from"./TreeMap-e284a39e.js";import{r as X}from"./sonar-ace0ce62.js";import{r as q}from"./range-163cdb4a.js";import"./index-1b03fe98.js";import"./schemes-56affe43.js";import"./RadialAxis-6c2bc59c.js";import"./rdk-0beed5d4.js";import"./index-6fd5a17b.js";import"./index-256d607f.js";import"./frame-a8f3761f.js";import"./index-f6b105ee.js";import"./extends-20258d9b.js";import"./chroma-699b8ba0.js";import"./SVGVisualElement-f20753d9.js";import"./helper-26bacd48.js";import"./quantile-a1f83f78.js";import"./useHoverIntent-9f4f4ce5.js";import"./RadialValueMarker-7b3f8322.js";import"./time-a9784969.js";import"./DiscreteLegendEntry-49610185.js";import"./SequentialLegend-1647127f.js";import"./Count-a38a1947.js";import"./invert-4b58fa06.js";import"./constant-7ff63248.js";import"./moment-a9aaa855.js";const Te={title:"Charts/TreeMap",component:a,subcomponents:{TreeMapSeries:o,TreeMapRect:G,TreeMapLabel:h}},k=[{key:"AWS",data:100},{key:"SendGrid",data:45},{key:"Okta",data:75},{key:"Twillo",data:25}],s=()=>e(a,{height:450,width:450,data:k,series:e(o,{colorScheme:"cybertron"})}),d=()=>e(a,{height:400,width:400,series:e(o,{label:e(h,{placement:"middle"})}),data:k}),m=()=>e(a,{height:400,width:400,series:e(o,{animated:!1}),data:k}),U=[{key:"Short text",data:100},{key:"Another short text",data:45},{key:"This is a test of very long text that should not fit in a rectangle's width.",data:75},{key:"This is another test of even longer text that should not fit in a rectangle at all because the text height should be more than the rectangle's height.",data:25}],i=()=>e(a,{height:400,width:400,data:U}),n=()=>e(a,{height:400,width:400,series:e(o,{label:e(h,{wrap:!1})}),data:U}),c=()=>e(a,{data:z,height:600,width:600}),p=()=>{const r=q(100).map(t=>({key:`Item ${t+1}`,data:X(0,100)}));return e(a,{data:r,height:600,width:600})},l=()=>e(a,{height:400,width:400,data:k,series:e(o,{rect:e(G,{onMouseEnter:(r,t)=>{console.log("onMouseEnter",r,t)},onMouseLeave:(r,t)=>{console.log("onMouseLeave",r,t)},onClick:(r,t)=>{console.log("onClick",r,t),alert(`Clicked ${t.data.key}`)}})})}),z=[{key:"Item 1",data:3},{key:"Item 2",data:12},{key:"Item 3",data:11},{key:"Item 4",data:13},{key:"Item 5",data:12},{key:"Item 6",data:8},{key:"Item 7",data:10},{key:"Item 8",data:17},{key:"Item 9",data:2},{key:"Item 10",data:4},{key:"Item 11",data:0},{key:"Item 12",data:15},{key:"Item 13",data:12},{key:"Item 14",data:5},{key:"Item 15",data:12},{key:"Item 16",data:1},{key:"Item 17",data:7},{key:"Item 18",data:7},{key:"Item 19",data:12},{key:"Item 20",data:1},{key:"Item 21",data:5},{key:"Item 22",data:0},{key:"Item 23",data:1},{key:"Item 24",data:0},{key:"Item 25",data:11},{key:"Item 26",data:17},{key:"Item 27",data:17},{key:"Item 28",data:11},{key:"Item 29",data:8},{key:"Item 30",data:7},{key:"Item 31",data:13},{key:"Item 32",data:7},{key:"Item 33",data:3},{key:"Item 34",data:9},{key:"Item 35",data:16},{key:"Item 36",data:11},{key:"Item 37",data:8},{key:"Item 38",data:12},{key:"Item 39",data:7},{key:"Item 40",data:4},{key:"Item 41",data:5},{key:"Item 42",data:11},{key:"Item 43",data:17},{key:"Item 44",data:11},{key:"Item 45",data:1},{key:"Item 46",data:10},{key:"Item 47",data:10},{key:"Item 48",data:12},{key:"Item 49",data:3},{key:"Item 50",data:14}],H=[{key:"Windows",data:[{key:"WinXP",data:15},{key:"Win10",data:20},{key:"Win7",data:50},{key:"WinVista",data:10},{key:"Win98",data:5}]},{key:"MacOS",data:[{key:"Sierra",data:20},{key:"Catalina",data:30},{key:"BigSur",data:40},{key:"Ventura",data:60}]},{key:"Linux",data:[{key:"Ubuntu",data:70},{key:"Fedora",data:60},{key:"CentOS",data:50}]}],y=()=>e(a,{height:450,width:450,data:H,series:e(o,{colorScheme:"cybertron"})});var I,g,u;s.parameters={...s.parameters,docs:{...(I=s.parameters)==null?void 0:I.docs,source:{originalSource:'() => <TreeMap height={450} width={450} data={simpleData} series={<TreeMapSeries colorScheme="cybertron" />} />',...(u=(g=s.parameters)==null?void 0:g.docs)==null?void 0:u.source}}};var M,S,T;d.parameters={...d.parameters,docs:{...(M=d.parameters)==null?void 0:M.docs,source:{originalSource:'() => <TreeMap height={400} width={400} series={<TreeMapSeries label={<TreeMapLabel placement="middle" />} />} data={simpleData} />',...(T=(S=d.parameters)==null?void 0:S.docs)==null?void 0:T.source}}};var w,b,D;m.parameters={...m.parameters,docs:{...(w=m.parameters)==null?void 0:w.docs,source:{originalSource:"() => <TreeMap height={400} width={400} series={<TreeMapSeries animated={false} />} data={simpleData} />",...(D=(b=m.parameters)==null?void 0:b.docs)==null?void 0:D.source}}};var f,v,L;i.parameters={...i.parameters,docs:{...(f=i.parameters)==null?void 0:f.docs,source:{originalSource:"() => <TreeMap height={400} width={400} data={longLabelData} />",...(L=(v=i.parameters)==null?void 0:v.docs)==null?void 0:L.source}}};var C,x,W;n.parameters={...n.parameters,docs:{...(C=n.parameters)==null?void 0:C.docs,source:{originalSource:"() => <TreeMap height={400} width={400} series={<TreeMapSeries label={<TreeMapLabel wrap={false} />} />} data={longLabelData} />",...(W=(x=n.parameters)==null?void 0:x.docs)==null?void 0:W.source}}};var E,N,$;c.parameters={...c.parameters,docs:{...(E=c.parameters)==null?void 0:E.docs,source:{originalSource:"() => <TreeMap data={twentyItems} height={600} width={600} />",...($=(N=c.parameters)==null?void 0:N.docs)==null?void 0:$.source}}};var A,O,_;p.parameters={...p.parameters,docs:{...(A=p.parameters)==null?void 0:A.docs,source:{originalSource:`() => {
  const longData: ChartShallowDataShape[] = range(100).map(o => ({
    key: \`Item \${o + 1}\`,
    data: randomNumber(0, 100)
  }));
  return <TreeMap data={longData} height={600} width={600} />;
}`,...(_=(O=p.parameters)==null?void 0:O.docs)==null?void 0:_.source}}};var j,P,R;l.parameters={...l.parameters,docs:{...(j=l.parameters)==null?void 0:j.docs,source:{originalSource:`() => <TreeMap height={400} width={400} data={simpleData} series={<TreeMapSeries rect={<TreeMapRect onMouseEnter={(event, data) => {
  console.log('onMouseEnter', event, data);
}} onMouseLeave={(event, data) => {
  console.log('onMouseLeave', event, data);
}} onClick={(event, data) => {
  console.log('onClick', event, data);
  alert(\`Clicked \${data.data.key}\`);
}} />} />} />`,...(R=(P=l.parameters)==null?void 0:P.docs)==null?void 0:R.source}}};var V,B,F;y.parameters={...y.parameters,docs:{...(V=y.parameters)==null?void 0:V.docs,source:{originalSource:'() => <TreeMap height={450} width={450} data={nestedData} series={<TreeMapSeries colorScheme="cybertron" />} />',...(F=(B=y.parameters)==null?void 0:B.docs)==null?void 0:F.source}}};export{l as Events,d as LabelPosition,i as LongText,y as Nested,m as NoAnimation,n as NoWrap,s as Simple,p as _100Items,c as _20Items,Te as default};
